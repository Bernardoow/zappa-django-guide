{
    "docs": [
        {
            "location": "/", 
            "text": "Zappa Django Example Walkthroughs\n\n\nThis repo exists to document the process of getting a standard Django project running live in AWS Lambda using the \n\nzappa project\n.  We will explore various configurations in a building-block fashion in the hopes that folks can leverage only the relevant parts for their needs.\n\n\nSetup and Prerequisites\n\n\nTo ensure baseline expectations are set, all walkthroughs will assume the following criteria:\n\n\n\n\nPython 2.7 (due to \nAWS lambda only supporting 2.7\n) \n\n\nDjango 1.10.4\n\n\nzappa 0.32.1\n\n\n\n\nWalkthroughs\n\n\nCore Django Setup\n\n\nThis section documents setting up a Django project with only core Python functionality responding to HTTP calls.  The value of this core walkthrough could be to power an API driven compute engine or a event-driven data processing tool without the need to provide a UI.\n\n\nSupport for Static Files\n\n\nNow how to get static files hosted", 
            "title": "Home"
        }, 
        {
            "location": "/#zappa-django-example-walkthroughs", 
            "text": "This repo exists to document the process of getting a standard Django project running live in AWS Lambda using the  zappa project .  We will explore various configurations in a building-block fashion in the hopes that folks can leverage only the relevant parts for their needs.", 
            "title": "Zappa Django Example Walkthroughs"
        }, 
        {
            "location": "/#setup-and-prerequisites", 
            "text": "To ensure baseline expectations are set, all walkthroughs will assume the following criteria:   Python 2.7 (due to  AWS lambda only supporting 2.7 )   Django 1.10.4  zappa 0.32.1", 
            "title": "Setup and Prerequisites"
        }, 
        {
            "location": "/#walkthroughs", 
            "text": "", 
            "title": "Walkthroughs"
        }, 
        {
            "location": "/#core-django-setup", 
            "text": "This section documents setting up a Django project with only core Python functionality responding to HTTP calls.  The value of this core walkthrough could be to power an API driven compute engine or a event-driven data processing tool without the need to provide a UI.", 
            "title": "Core Django Setup"
        }, 
        {
            "location": "/#support-for-static-files", 
            "text": "Now how to get static files hosted", 
            "title": "Support for Static Files"
        }, 
        {
            "location": "/core_django_setup/", 
            "text": "Core Django Setup\n\n\nThis section documents setting up a Django project with only core Python functionality responding to HTTP calls.  The value of this core walkthrough could be to power an API driven compute engine or a event-driven data processing tool without the need to provide a UI.\n\n\nExpectations and Goals\n\n\nAfter going through this section the following will work:\n\n\n\n\nURL Routes in your Django projects\n\n\nViews can produce html / json / data output\n\n\nManagement Commands\n\n\n\n\nWhat will not work (yet - see other walkthroughs for this functionality)\n\n\n\n\nStatic Files will not be served (More on that \nhere\n)\n\n\nThere is no database connection available (not even SQLite)\n\n\nNo HTTPS support\n\n\n\n\nSetup and Prerequisites\n\n\n\n\nPython 2.7 (due to \nAWS lambda only supporting 2.7\n) \n\n\nDjango 1.10.4\n\n\nzappa 0.32.1\n\n\n\n\nSetup AWS Account Credentials\n\n\nDetails in this section are light because this information is documented well elsewhere on the web.\n\n\n\n\nCreate AWS Account if you haven't already\n\n\nCreate an S3 bucket.\n\n   For purposes of this walkthrough I have used the bucket name of \nzappatest-code\n in the 'US Standard' region.  This bucket will be used by zappa as a mechanism to upload your project into the lambda environment.  Thus it will generally be empty except during the brief time you are deploying the project.\n\n\nCreate an IAM User with API keys\n   Easier said than done.  The quick and easy way of doing this is to create a user with a policy that allows a very broad set of permissions.  However, this is not great from a security perspective. There is an \nongoing discussion\n about the exact set of permissions needed.\n\n\n\n\nNow we need to allow scripts and local programs to get the credentials created above.  You have some options for this:\n\n\n\n\n\n\nSet \nenvironment variables\n\n\nThis is very easy but must be done for each bash console you are using.\n\n\nexport AWS_ACCESS_KEY_ID=\nyour key here\n\nexport AWS_SECRET_ACCESS_KEY=\nyour secret access key here\n\n\n\n\n\n\n\n\n\nCreate a local credentials file (\n~/.aws/credentials\n on Linux, or OS X)\n\n\nProbably a better long term solution since you can store multiple \n sets of keys for different environments using profiles.\n\n\n[default]\naws_access_key_id = your_access_key_id\naws_secret_access_key = your_secret_access_key\n\n\n\n\n\n\n\n\nUseful links for Windows or more information:\n\n\n\n\nhttp://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\n\n\nhttp://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials\n\n\n\n\nCreate local environment\n\n\nIt is highly recommended that you leverage virtual environments for this test project.\n\n\nmkdir zappatest\ncd zappatest\nvirtualenv ve\nsource ve/bin/activate\npip install django zappa\n\n\n\n\nCreate very basic Django project\n\n\nFor the purposes of this walkthrough we are taking the most basic Django project.\n\n\ndjango-admin startproject frankie .\n\n\n\n\nTesting the basic Django project\n\n\nAt this point if you run \n\npython manage.py runserver\n\n\n\nAnd visit http://127.0.0.1:8000 with your browser you should see the standard Django 'It Worked!' page\n\n\nNow quit the server using Control-C.  You should be back at the console prompt\n\n\nSetup Zappa\n\n\nzappa init\n\n\nYou will encounter a series of prompts:\n\n\n\n\nName of environment - just accept the default 'dev'\n\n\nS3 bucket for deployments.  Use the value of the S3 bucket you created above.  If you follow the walkthrough then use \nzappatest-code\n\n\nZappa should automatically find the correct settings file so accept the default\n\n\nSay 'no' to deploying globally\n\n\nIf everything looks ok, then accept the info\n\n\n\n\nHere's a transcript of what you should see:\n\n\n(ve) $ zappa init\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\n\nWelcome to Zappa!\n\nZappa is a system for running server-less Python web applications on AWS Lambda and AWS API Gateway.\nThis `init` command will help you create and configure your new Zappa deployment.\nLet's get started!\n\nYour Zappa configuration can support multiple production environments, like 'dev', 'staging', and 'production'.\nWhat do you want to call this environment (default 'dev'):\n\nYour Zappa deployments will need to be uploaded to a private S3 bucket.\nIf you don't have a bucket yet, we'll create one for you too.\nWhat do you want call your bucket? (default 'zappa-v20ssav8g'): zappatest-code\n\nIt looks like this is a Django application!\nWhat is the module path to your projects's Django settings?\nWe discovered: frankie.settings\nWhere are your project's settings? (default 'frankie.settings'):\n\nYou can optionally deploy to all available regions in order to provide fast global service.\nIf you are using Zappa for the first time, you probably don't want to do this!\nWould you like to deploy this application to globally? (default 'n') [y/n/(p)rimary]: n\n\nOkay, here's your zappa_settings.js:\n\n{\n    \ndev\n: {\n        \ndjango_settings\n: \nfrankie.settings\n,\n        \ns3_bucket\n: \nzappatest-code\n\n    }\n}\n\nDoes this look okay? (default 'y') [y/n]: y\n\nDone! Now you can deploy your Zappa application by executing:\n\n    $ zappa deploy dev\n\nAfter that, you can update your application code with:\n\n    $ zappa update dev\n\nTo learn more, check out our project page on GitHub here: https://github.com/Miserlou/Zappa\nand stop by our Slack channel here: http://bit.do/zappa\n\nEnjoy!,\n ~ Team Zappa!\n(ve) $\n\n\n\n\nTesting the Zappa Setup\n\n\nSo now if we run\n\n\nzappa deploy dev\n\n\n\n\nBut unfortunately we encounter an error: \n\n\n(ve) $ zappa deploy dev\nCalling deploy for environment dev..\nWarning! AWS Lambda may not be available in this AWS Region!\nWarning! AWS API Gateway may not be available in this AWS Region!\nOh no! An error occurred! :(\n\n==============\n\nTraceback (most recent call last):\n    [boring callback removed]\nNoRegionError: You must specify a region.\n\n==============\n\nNeed help? Found a bug? Let us know! :D\nFile bug reports on GitHub here: https://github.com/Miserlou/Zappa\nAnd join our Slack channel here: https://slack.zappa.io\nLove!,\n ~ Team Zappa!\n(ve) $\n\n\nAw man, the error \nNoRegionError: You must specify a region.\n is holding us back.  Zappa is complaining that no AWS region is specified.  So we need to specify a region.  In this walkthrough we are leveraging \nus-east-1\n which corresponds to the same region we used above for the S3 bucket.\n\n\nYou have options:\n\n\n\n\n\n\nSpecify a default region using environment variables\n\n\nAgain, the drawback here is this must be set for every console\n\n\nexport AWS_DEFAULT_REGION=us-east-1\n\n\n\n\n\n\n\n\nAdd default region in your \n~/.awd/credentials\n file\n\n\nBetter but this will affect all AWS scripts and programs on your machine.\n\n\n[default]\naws_access_key_id = your_access_key_id\naws_secret_access_key = your_secret_access_key\nregion=us-east-1\n\n\n\n\n\n\n\n\nEdit the \nzappa_settings.json\n file to have an AWS region.\n\n\nProbably best option because now the zappa configuration has minimal dependencies on external user environment.\n\n\n{\n \ndev\n: {\n     \naws_region\n: \nus-east-1\n,\n     \ndjango_settings\n: \nfrankie.settings\n,\n     \ns3_bucket\n: \nzappatest-code\n\n        } \n}\n\n\n\n\nDon't forget to put commas in the proper place - JSON is fiddly!\n\n\n\n\n\n\nDeploy your project using Zappa\n\n\nNow it's easy to do the initial deployment\n\n\nzappa deploy dev\n\n\n\n\nZappa will automatically create an AWS API gateway that will route HTTP requests to your lambda Django project.  You should see something like:\n\n\n(ve) $ zappa deploy dev\nCalling deploy for environment dev..\nDownloading and installing dependencies..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [00:07\n00:00,  3.91pkg/s]\nPackaging project as zip..\nUploading zappatest-dev-1482425936.zip (13.1MiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13.8M/13.8M [00:25\n00:00, 603KB/s]\nScheduling..\nScheduled zappatest-dev-zappa-keep-warm-handler.keep_warm_callback!\nUploading zappatest-dev-template-1482425980.json (1.5KiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.58K/1.58K [00:00\n00:00, 2.08KB/s]\nWaiting for stack zappatest-dev to create (this can take a bit)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:18\n00:00,  4.69s/res]\nDeploying API Gateway..\nDeployment complete!: https://x6kb437rh.execute-api.us-east-1.amazonaws.com/dev\n\n\n\n\nBrilliant!  We should be able to use a browser to visit the URL provided at the end of the script.\n\n\nOnce we do, however, we get:\n\n\nDisallowedHost at /\nInvalid HTTP_HOST header: 'x6kb437rh.execute-api.us-east-1.amazonaws.com'. \nYou may need to add x6kb437rh.execute-api.us-east-1.amazonaws.com' to ALLOWED_HOSTS.\n\n\n\n\nThe built-in \nDjango security settings\n are kicking in and preventing bad stuff from happening.  So we need to modify our Django settings file to accommodate the \ndefault hostname that AWS API Gateway uses\n.  Note that the AWS region is part of the hostname and thus should match your selected region.\n\n\nNow edit \nfrankie/settings.py\n and change ALLOWED_HOSTS to;\n\n\nALLOWED_HOSTS = [ '127.0.0.1', '.execute-api.us-east-1.amazonaws.com', ]\n\n\n\n\nOnce done, we can again deploy to AWS Lambda.  But this time, since we've already pushed the initial deploy, we use the \nupdate\n action on the zappa command line.\n\n\nzappa update dev\n\n\n\n\nAfter this completes, you should be able to see your Django site in action.  Note that you will actually get a Page not found (404) response.  This indicates that your Django site is functional and working.", 
            "title": "Core Django Setup"
        }, 
        {
            "location": "/core_django_setup/#core-django-setup", 
            "text": "This section documents setting up a Django project with only core Python functionality responding to HTTP calls.  The value of this core walkthrough could be to power an API driven compute engine or a event-driven data processing tool without the need to provide a UI.", 
            "title": "Core Django Setup"
        }, 
        {
            "location": "/core_django_setup/#expectations-and-goals", 
            "text": "After going through this section the following will work:   URL Routes in your Django projects  Views can produce html / json / data output  Management Commands   What will not work (yet - see other walkthroughs for this functionality)   Static Files will not be served (More on that  here )  There is no database connection available (not even SQLite)  No HTTPS support", 
            "title": "Expectations and Goals"
        }, 
        {
            "location": "/core_django_setup/#setup-and-prerequisites", 
            "text": "Python 2.7 (due to  AWS lambda only supporting 2.7 )   Django 1.10.4  zappa 0.32.1", 
            "title": "Setup and Prerequisites"
        }, 
        {
            "location": "/core_django_setup/#setup-aws-account-credentials", 
            "text": "Details in this section are light because this information is documented well elsewhere on the web.   Create AWS Account if you haven't already  Create an S3 bucket. \n   For purposes of this walkthrough I have used the bucket name of  zappatest-code  in the 'US Standard' region.  This bucket will be used by zappa as a mechanism to upload your project into the lambda environment.  Thus it will generally be empty except during the brief time you are deploying the project.  Create an IAM User with API keys\n   Easier said than done.  The quick and easy way of doing this is to create a user with a policy that allows a very broad set of permissions.  However, this is not great from a security perspective. There is an  ongoing discussion  about the exact set of permissions needed.   Now we need to allow scripts and local programs to get the credentials created above.  You have some options for this:    Set  environment variables  This is very easy but must be done for each bash console you are using.  export AWS_ACCESS_KEY_ID= your key here \nexport AWS_SECRET_ACCESS_KEY= your secret access key here     Create a local credentials file ( ~/.aws/credentials  on Linux, or OS X)  Probably a better long term solution since you can store multiple \n sets of keys for different environments using profiles.  [default]\naws_access_key_id = your_access_key_id\naws_secret_access_key = your_secret_access_key", 
            "title": "Setup AWS Account Credentials"
        }, 
        {
            "location": "/core_django_setup/#useful-links-for-windows-or-more-information", 
            "text": "http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html  http://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials", 
            "title": "Useful links for Windows or more information:"
        }, 
        {
            "location": "/core_django_setup/#create-local-environment", 
            "text": "It is highly recommended that you leverage virtual environments for this test project.  mkdir zappatest\ncd zappatest\nvirtualenv ve\nsource ve/bin/activate\npip install django zappa", 
            "title": "Create local environment"
        }, 
        {
            "location": "/core_django_setup/#create-very-basic-django-project", 
            "text": "For the purposes of this walkthrough we are taking the most basic Django project.  django-admin startproject frankie .", 
            "title": "Create very basic Django project"
        }, 
        {
            "location": "/core_django_setup/#testing-the-basic-django-project", 
            "text": "At this point if you run  python manage.py runserver  And visit http://127.0.0.1:8000 with your browser you should see the standard Django 'It Worked!' page  Now quit the server using Control-C.  You should be back at the console prompt", 
            "title": "Testing the basic Django project"
        }, 
        {
            "location": "/core_django_setup/#setup-zappa", 
            "text": "zappa init \nYou will encounter a series of prompts:   Name of environment - just accept the default 'dev'  S3 bucket for deployments.  Use the value of the S3 bucket you created above.  If you follow the walkthrough then use  zappatest-code  Zappa should automatically find the correct settings file so accept the default  Say 'no' to deploying globally  If everything looks ok, then accept the info   Here's a transcript of what you should see:  (ve) $ zappa init\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\n\nWelcome to Zappa!\n\nZappa is a system for running server-less Python web applications on AWS Lambda and AWS API Gateway.\nThis `init` command will help you create and configure your new Zappa deployment.\nLet's get started!\n\nYour Zappa configuration can support multiple production environments, like 'dev', 'staging', and 'production'.\nWhat do you want to call this environment (default 'dev'):\n\nYour Zappa deployments will need to be uploaded to a private S3 bucket.\nIf you don't have a bucket yet, we'll create one for you too.\nWhat do you want call your bucket? (default 'zappa-v20ssav8g'): zappatest-code\n\nIt looks like this is a Django application!\nWhat is the module path to your projects's Django settings?\nWe discovered: frankie.settings\nWhere are your project's settings? (default 'frankie.settings'):\n\nYou can optionally deploy to all available regions in order to provide fast global service.\nIf you are using Zappa for the first time, you probably don't want to do this!\nWould you like to deploy this application to globally? (default 'n') [y/n/(p)rimary]: n\n\nOkay, here's your zappa_settings.js:\n\n{\n     dev : {\n         django_settings :  frankie.settings ,\n         s3_bucket :  zappatest-code \n    }\n}\n\nDoes this look okay? (default 'y') [y/n]: y\n\nDone! Now you can deploy your Zappa application by executing:\n\n    $ zappa deploy dev\n\nAfter that, you can update your application code with:\n\n    $ zappa update dev\n\nTo learn more, check out our project page on GitHub here: https://github.com/Miserlou/Zappa\nand stop by our Slack channel here: http://bit.do/zappa\n\nEnjoy!,\n ~ Team Zappa!\n(ve) $", 
            "title": "Setup Zappa"
        }, 
        {
            "location": "/core_django_setup/#testing-the-zappa-setup", 
            "text": "So now if we run  zappa deploy dev  But unfortunately we encounter an error:   (ve) $ zappa deploy dev\nCalling deploy for environment dev..\nWarning! AWS Lambda may not be available in this AWS Region!\nWarning! AWS API Gateway may not be available in this AWS Region!\nOh no! An error occurred! :(\n\n==============\n\nTraceback (most recent call last):\n    [boring callback removed]\nNoRegionError: You must specify a region.\n\n==============\n\nNeed help? Found a bug? Let us know! :D\nFile bug reports on GitHub here: https://github.com/Miserlou/Zappa\nAnd join our Slack channel here: https://slack.zappa.io\nLove!,\n ~ Team Zappa!\n(ve) $ \nAw man, the error  NoRegionError: You must specify a region.  is holding us back.  Zappa is complaining that no AWS region is specified.  So we need to specify a region.  In this walkthrough we are leveraging  us-east-1  which corresponds to the same region we used above for the S3 bucket.  You have options:    Specify a default region using environment variables  Again, the drawback here is this must be set for every console  export AWS_DEFAULT_REGION=us-east-1    Add default region in your  ~/.awd/credentials  file  Better but this will affect all AWS scripts and programs on your machine.  [default]\naws_access_key_id = your_access_key_id\naws_secret_access_key = your_secret_access_key\nregion=us-east-1    Edit the  zappa_settings.json  file to have an AWS region.  Probably best option because now the zappa configuration has minimal dependencies on external user environment.  {\n  dev : {\n      aws_region :  us-east-1 ,\n      django_settings :  frankie.settings ,\n      s3_bucket :  zappatest-code \n        } \n}  Don't forget to put commas in the proper place - JSON is fiddly!", 
            "title": "Testing the Zappa Setup"
        }, 
        {
            "location": "/core_django_setup/#deploy-your-project-using-zappa", 
            "text": "Now it's easy to do the initial deployment  zappa deploy dev  Zappa will automatically create an AWS API gateway that will route HTTP requests to your lambda Django project.  You should see something like:  (ve) $ zappa deploy dev\nCalling deploy for environment dev..\nDownloading and installing dependencies..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [00:07 00:00,  3.91pkg/s]\nPackaging project as zip..\nUploading zappatest-dev-1482425936.zip (13.1MiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13.8M/13.8M [00:25 00:00, 603KB/s]\nScheduling..\nScheduled zappatest-dev-zappa-keep-warm-handler.keep_warm_callback!\nUploading zappatest-dev-template-1482425980.json (1.5KiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.58K/1.58K [00:00 00:00, 2.08KB/s]\nWaiting for stack zappatest-dev to create (this can take a bit)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:18 00:00,  4.69s/res]\nDeploying API Gateway..\nDeployment complete!: https://x6kb437rh.execute-api.us-east-1.amazonaws.com/dev  Brilliant!  We should be able to use a browser to visit the URL provided at the end of the script.  Once we do, however, we get:  DisallowedHost at /\nInvalid HTTP_HOST header: 'x6kb437rh.execute-api.us-east-1.amazonaws.com'. \nYou may need to add x6kb437rh.execute-api.us-east-1.amazonaws.com' to ALLOWED_HOSTS.  The built-in  Django security settings  are kicking in and preventing bad stuff from happening.  So we need to modify our Django settings file to accommodate the  default hostname that AWS API Gateway uses .  Note that the AWS region is part of the hostname and thus should match your selected region.  Now edit  frankie/settings.py  and change ALLOWED_HOSTS to;  ALLOWED_HOSTS = [ '127.0.0.1', '.execute-api.us-east-1.amazonaws.com', ]  Once done, we can again deploy to AWS Lambda.  But this time, since we've already pushed the initial deploy, we use the  update  action on the zappa command line.  zappa update dev  After this completes, you should be able to see your Django site in action.  Note that you will actually get a Page not found (404) response.  This indicates that your Django site is functional and working.", 
            "title": "Deploy your project using Zappa"
        }, 
        {
            "location": "/static_files/", 
            "text": "Static Files Setup\n\n\nGenerally if you'd like to use your Django project to present a User Interface (UI) then you'll need to display Images and CSS and serve Javascript files.  These are known as \nstatic files\n and to deliver them using Zappa is unlike the traditional method of hosting the static files on a Linux or Windows box.  \n\n\nStatic files and Code on a Single Server\n\n\nA very common configuration you may see recommended is to have your Django project \ndeployed on a server with your static files\n.  Then the advice is to have your web server software (apache, nginx, or other) have special mechanisms to directly serve the static files.  The idea is to have the fast web server software handle delivering the static images to clients and the comparatively slow Django/python code process the more complex views and page content.  \n\n\nBecause Zappa runs in the serverless lambda environment, this approach is not feasible since you cannot configure the web server to handle various url paths differently.  Thus another approach must be taken.\n\n\nLeveraging WSGI app to serve files\n\n\nThe situation where one does not have access to the web server software configuration is more common than one may think.  Hosting in a shared environment, or on Platform as a Service (PaaS) like OpenShift may prevent full configuration of the web server to effectively serve static files.  \n\n\nThere are ways to leverage the WSGI application (Django for us) and instruct it to serve static files.  Normally, Django treats URL requests as an opportunity to run python code.  And the python code may have complex logic.  But there is a model called [WhiteNoise] (https://github.com/evansd/whitenoise).  It is an app that will minimize the python code processing to more efficiently serve static files.  Thus no external web server software configuration is required.  While perhaps not as optimal as having the web server hosting the files, this method has been used in production effectively.  \n\n\nUsing external services to serve files\n\n\nFinally, there is an option to use an \nexternal service to serve static files\n.  This is the option that is the subject of this walkthrough.\n\n\nWhile any external service that serves files over HTTP could work, the focus for us will be to leverage the AWS service of S3 and the Content Delivery Network (CDN) of CloudFront to meet our needs.  \n\n\nThe S3 service will contain our files and provide the fundamental HTTP/HTTPS service.  This alone will suffice for many recreational projects, but more professional project will want to leverage CloudFront to provide caching, faster delivery, and better protection of assets.\n\n\nUsing a CDN for the entire project\n\n\nThere are also advantages to serving the entire Django project (Lambda functions and S3 Static files) via the CloudFront CDN.  This option will not be covered in this Walkthrough.\n\n\nSetup and Prerequisites\n\n\n\n\nPython 2.7 (due to \nAWS lambda only supporting 2.7\n) \n\n\nDjango 1.10.4\n\n\nzappa 0.32.1\n\n\n\n\nWalkthrough", 
            "title": "Hosting Static Files"
        }, 
        {
            "location": "/static_files/#static-files-setup", 
            "text": "Generally if you'd like to use your Django project to present a User Interface (UI) then you'll need to display Images and CSS and serve Javascript files.  These are known as  static files  and to deliver them using Zappa is unlike the traditional method of hosting the static files on a Linux or Windows box.", 
            "title": "Static Files Setup"
        }, 
        {
            "location": "/static_files/#static-files-and-code-on-a-single-server", 
            "text": "A very common configuration you may see recommended is to have your Django project  deployed on a server with your static files .  Then the advice is to have your web server software (apache, nginx, or other) have special mechanisms to directly serve the static files.  The idea is to have the fast web server software handle delivering the static images to clients and the comparatively slow Django/python code process the more complex views and page content.    Because Zappa runs in the serverless lambda environment, this approach is not feasible since you cannot configure the web server to handle various url paths differently.  Thus another approach must be taken.", 
            "title": "Static files and Code on a Single Server"
        }, 
        {
            "location": "/static_files/#leveraging-wsgi-app-to-serve-files", 
            "text": "The situation where one does not have access to the web server software configuration is more common than one may think.  Hosting in a shared environment, or on Platform as a Service (PaaS) like OpenShift may prevent full configuration of the web server to effectively serve static files.    There are ways to leverage the WSGI application (Django for us) and instruct it to serve static files.  Normally, Django treats URL requests as an opportunity to run python code.  And the python code may have complex logic.  But there is a model called [WhiteNoise] (https://github.com/evansd/whitenoise).  It is an app that will minimize the python code processing to more efficiently serve static files.  Thus no external web server software configuration is required.  While perhaps not as optimal as having the web server hosting the files, this method has been used in production effectively.", 
            "title": "Leveraging WSGI app to serve files"
        }, 
        {
            "location": "/static_files/#using-external-services-to-serve-files", 
            "text": "Finally, there is an option to use an  external service to serve static files .  This is the option that is the subject of this walkthrough.  While any external service that serves files over HTTP could work, the focus for us will be to leverage the AWS service of S3 and the Content Delivery Network (CDN) of CloudFront to meet our needs.    The S3 service will contain our files and provide the fundamental HTTP/HTTPS service.  This alone will suffice for many recreational projects, but more professional project will want to leverage CloudFront to provide caching, faster delivery, and better protection of assets.", 
            "title": "Using external services to serve files"
        }, 
        {
            "location": "/static_files/#using-a-cdn-for-the-entire-project", 
            "text": "There are also advantages to serving the entire Django project (Lambda functions and S3 Static files) via the CloudFront CDN.  This option will not be covered in this Walkthrough.", 
            "title": "Using a CDN for the entire project"
        }, 
        {
            "location": "/static_files/#setup-and-prerequisites", 
            "text": "Python 2.7 (due to  AWS lambda only supporting 2.7 )   Django 1.10.4  zappa 0.32.1", 
            "title": "Setup and Prerequisites"
        }, 
        {
            "location": "/static_files/#walkthrough", 
            "text": "", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/additional/", 
            "text": "Additional Resources\n\n\nThis site powered by \nmkdocs\n and powered by github. \n\n\nSource documents are here: \nhttps://github.com/edgarroman/zappa-django-example", 
            "title": "Additional"
        }, 
        {
            "location": "/additional/#additional-resources", 
            "text": "This site powered by  mkdocs  and powered by github.   Source documents are here:  https://github.com/edgarroman/zappa-django-example", 
            "title": "Additional Resources"
        }
    ]
}